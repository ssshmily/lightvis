<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19-pr16">


  <!-- Spot Style - move -->


  <style name="Iconmove"
         url="%FIRSTXML%/spots/forward-animated_user_defaultpoint0.png"
         visible="false"
         frame="0"
         lastframe="11"
         framewidth="80"
         frameheight="80"
         stopspotsequence="false"
         crop="0|0|80|80"
         edge="bottom" ox="0" oy="0"
         onloaded="startspotanimation(0.1);showPermanentTooltip(touch, bottom);"
         onhover="onhoverIconmove"
         onout="onoutIconmove"

         height="50"
         width="50"
         />
  <action name="onhoverIconmove">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconmove">
    hideTooltip();



  </action>




  <!-- Spot Style - Default Point Spot Style -->


  <style name="IconDefaultPointSpotStyle"
         url="%FIRSTXML%/spots/dongtai_user_defaultpoint1.png"
         visible="false"
         frame="0"
         lastframe="10"
         framewidth="300"
         frameheight="300"
         stopspotsequence="false"
         crop="0|0|300|300"
         edge="center"
         onloaded="startspotanimation(0.1);showPermanentTooltip(touch);"
         onhover="onhoverIconDefaultPointSpotStyle"
         onout="onoutIconDefaultPointSpotStyle"

         height="50"
         width="50"
         />
  <action name="onhoverIconDefaultPointSpotStyle">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconDefaultPointSpotStyle">
    hideTooltip();



  </action>



<!-- ************************* -->
<!-- 360Images Responsive Grid Plugin -->
<!-- ************************* -->
<include url="%FIRSTXML%/graphics/360imagesgrid/gridmenu.xml"/>


<responsive_grid

	button="false"

	padding_top="75"
	padding_bottom="75"
	width_margin="50"

	vcenter="false"

	grid_bgcolor="0x000000"
	grid_bgalpha="0.7000076295109483"

	display_title="true"
	grid_title="桃花源别墅"
	grid_title_css="color:#ffffff;font-family:Raleway;font-size:35px;"

	group="true"
	current="false"

	cat_container_height="35"
	cat_container_border="0,0,1,0 0xffffff 1.00"
	cat_container_title_css="color:#ffffff;font-family:Raleway;font-size:25px;"
	cat_container_title_align="left"

	cat_container_border_height="1"

	cat_desc_css="color:#ffffff;font-family:Raleway;font-size:14px;text-align:left"

	display_cat_desc="false"

	thumb_padding="25"
	thumb_scale="100"
	thumb_border_bgborder="3 0xffffff 1.00"

	display_thumb_title="true"


	thumb_title_align="bottom"
	thumb_title_x="0"
	thumb_title_y="5"

	thumb_title_css="color:#ffffff;font-family:Raleway;font-size:16px;text-align:left;"

	thumb_title_roundedge="5"
	thumb_title_background="true"
	thumb_title_backgroundcolor="0x000000"
	thumb_title_backgroundalpha="0.80000000000000004"
	border="false"

	thumb_title_padding="3 10"



	display_thumb_desc="true"
	display_thumb_desc_css="color:#ffffff;font-family:Raleway;font-size:15px;text-align:center"

	thumb_desc_bg_color="0x000000"
	thumb_desc_bg_alpha="0.59999999999999998"

	thumb_desc_padding="8 15"
/>


<!-- ********** -->
<!-- thumbnail -->
<!-- id : button -->
<!-- ********** -->

  <layer name="button"
         keep="true"
         url="%FIRSTXML%/graphics/button/_262233687325321.png"
         align="bottom"
         x="0"
         y="20"
         zorder="2"
         visible="false"
         onclick="buttonOnClick"
         height="40"
         width="40"
         />



  <action name="buttonOnClick">rg_show_thumbs_grid(true);

  </action>

  <events name="buttonevents"
    onTourStart="showbutton();"
    hidetourcontrols="hidebutton();"
    showtourcontrols="showbutton();"
    keep="true" />
  <action name="hidebutton">set(layer[button].visible, false);</action>
  <action name="showbutton">if(tour_displaycontrols,set(layer[button].visible, true);,hidebutton(););</action>


<!-- ********** -->
<!-- music -->
<!-- id : togglebutton -->
<!-- ********** -->



  <layer name="togglebutton"
         keep="true"
         url="%FIRSTXML%/graphics/togglebutton/_215512276838899.png"
         align="bottom"
         x="70"
         y="20"
         zorder="3"
         state="true"
         onclick="togglebuttonOnClick"
         onout=""
         height="40"
         width="40"
         visible="false"
         />

  <action name="togglebuttonOnClick">
    if (state,
      set(state, false);stopTourSounds();


      set(url,%FIRSTXML%/graphics/togglebutton/_38899.png);
     ,
      set(state, true);playTourSounds();


      set(url,%FIRSTXML%/graphics/togglebutton/_215512276838899.png);
    );
  </action>

  <events name="togglebuttonevents"
    onTourStart="showtogglebutton();"
    hidetourcontrols="hidetogglebutton();"
    showtourcontrols="showtogglebutton();"
    keep="true" />
  <action name="hidetogglebutton">set(layer[togglebutton].visible, false);</action>
  <action name="showtogglebutton">if(tour_displaycontrols,set(layer[togglebutton].visible, true);,hidetogglebutton(););</action>


<!-- ********** -->
<!-- xuanzhuan -->
<!-- id : togglebutton1 -->
<!-- ********** -->



  <layer name="togglebutton1"
         keep="true"
         url="%FIRSTXML%/graphics/togglebutton1/_211602605936716.png"
         align="bottom"
         x="-70"
         y="20"
         zorder="4"
         state="true"
         onclick="togglebutton1OnClick"
         onout=""
         height="40"
         width="40"
         visible="false"
         />

  <action name="togglebutton1OnClick">
    if (state,
      set(state, false);startautorotation();


      set(url,%FIRSTXML%/graphics/togglebutton1/_205723687325321.png);
     ,
      set(state, true);stopautorotation();


      set(url,%FIRSTXML%/graphics/togglebutton1/_211602605936716.png);
    );
  </action>

  <events name="togglebutton1events"
    onTourStart="showtogglebutton1();"
    hidetourcontrols="hidetogglebutton1();"
    showtourcontrols="showtogglebutton1();"
    keep="true" />
  <action name="hidetogglebutton1">set(layer[togglebutton1].visible, false);</action>
  <action name="showtogglebutton1">if(tour_displaycontrols,set(layer[togglebutton1].visible, true);,hidetogglebutton1(););</action>


<!-- ********** -->
<!-- tuoluoyi -->
<!-- id : togglebutton2 -->
<!-- ********** -->



  <layer name="togglebutton2"
         keep="true"
         url="%FIRSTXML%/graphics/togglebutton2/_3474620202.png"
         align="bottom"
         x="-140"
         y="20"
         zorder="5"
         state="true"
         onclick="togglebutton2OnClick"
         onout=""
         height="40"
         width="40"
         visible="false"
         />

  <action name="togglebutton2OnClick">
    if (state,
      set(state, false);disableGyroscope();


      set(url,%FIRSTXML%/graphics/togglebutton2/_38381384643474620202.png);
     ,
      set(state, true);enableGyroscope();


      set(url,%FIRSTXML%/graphics/togglebutton2/_3474620202.png);
    );
  </action>

  <events name="togglebutton2events"
    onTourStart="showtogglebutton2();"
    hidetourcontrols="hidetogglebutton2();"
    showtourcontrols="showtogglebutton2();"
    keep="true" />
  <action name="hidetogglebutton2">set(layer[togglebutton2].visible, false);</action>
  <action name="showtogglebutton2">if(tour_displaycontrols,set(layer[togglebutton2].visible, true);,hidetogglebutton2(););</action>


<!-- ********** -->
<!-- WebVR Button -->
<!-- id : webvrbutton -->
<!-- ********** -->


	<layer name="webvrbutton"
		keep="true"
		blocked="false"
		url="%FIRSTXML%/graphics/webvrbutton/_262232716924335.png"
		align="bottom"
		x="140"
		y="20"
		zorder="6"
		visible="false"
		onclick="if(scene[get(xml.scene)].full360 AND disableCurrentSceneVrConservation !== true,
    js(accessWebVr(get(xml.scene),get(videoscenestarttime)));
,
    js(accessWebVr(null));
);"

		height="40"
		width="40"
		/>

	<events name="webvrbuttonevents"
		onvrunavailable="hidewebvrbutton(true);"
		onTourStart="showwebvrbutton();"
		hidetourcontrols="hidewebvrbutton();"
		showtourcontrols="showwebvrbutton();"
		keep="true" />
	<action name="hidewebvrbutton">if(%1 == true,set(layer[webvrbutton].blocked, true););set(layer[webvrbutton].visible, false);</action>
	<action name="showwebvrbutton">if(tour_displaycontrols,if(layer[webvrbutton].blocked == false,set(layer[webvrbutton].visible, true););,hidewebvrbutton(););</action>


<!-- ********** -->
<!-- DNbig -->
<!-- id : buttonForASinglePano -->
<!-- ********** -->

  <layer name="buttonForASinglePano"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano/_32452_5_copy2279120221_2.png"
         align="bottom"
         x="0"
         y="80"
         zorder="7"
         visible="false"
         onclick="buttonForASinglePanoOnClick"
         height="40"
         width="100"
         />



  <action name="buttonForASinglePanoOnClick">
            mainloadscene(pano19942);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));


  </action>

  <events name="buttonForASinglePanoevents"
    onTourStart="showbuttonForASinglePano();"
    hidetourcontrols="hidebuttonForASinglePano();"
    showtourcontrols="showbuttonForASinglePano();"

    onPanoStart="showbuttonForASinglePano();"

    keep="true" />
  <action name="hidebuttonForASinglePano">set(layer[buttonForASinglePano].visible, false);</action>
  <action name="showbuttonForASinglePano">
    set(display_buttonForASinglePano, false);
    if(tour_displaycontrols,


    if (xml.scene == pano49, set(display_buttonForASinglePano, true); );


    );
    if (display_buttonForASinglePano,
      set(layer[buttonForASinglePano].visible, true);
    ,
      hidebuttonForASinglePano();
    );
  </action>



<!-- ********** -->
<!-- NDbig -->
<!-- id : buttonForASinglePano1 -->
<!-- ********** -->

  <layer name="buttonForASinglePano1"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano1/_32452_5_copy.png"
         align="bottom"
         x="0"
         y="80"
         zorder="8"
         visible="false"
         onclick="buttonForASinglePano1OnClick"
         height="40"
         width="100"
         />



  <action name="buttonForASinglePano1OnClick">
          mainloadscene(pano49);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));


  </action>

  <events name="buttonForASinglePano1events"
    onTourStart="showbuttonForASinglePano1();"
    hidetourcontrols="hidebuttonForASinglePano1();"
    showtourcontrols="showbuttonForASinglePano1();"

    onPanoStart="showbuttonForASinglePano1();"

    keep="true" />
  <action name="hidebuttonForASinglePano1">set(layer[buttonForASinglePano1].visible, false);</action>
  <action name="showbuttonForASinglePano1">
    set(display_buttonForASinglePano1, false);
    if(tour_displaycontrols,


    if (xml.scene == pano19942, set(display_buttonForASinglePano1, true); );


    );
    if (display_buttonForASinglePano1,
      set(layer[buttonForASinglePano1].visible, true);
    ,
      hidebuttonForASinglePano1();
    );
  </action>



<!-- ********** -->
<!-- DNsmall -->
<!-- id : buttonForASinglePano2 -->
<!-- ********** -->

  <layer name="buttonForASinglePano2"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano2/_32452_5_copy2279120221_2.png"
         align="bottom"
         x="0"
         y="80"
         zorder="9"
         visible="false"
         onclick="buttonForASinglePano2OnClick"
         height="40"
         width="100"
         />



  <action name="buttonForASinglePano2OnClick">
            mainloadscene(pano19941);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));


  </action>

  <events name="buttonForASinglePano2events"
    onTourStart="showbuttonForASinglePano2();"
    hidetourcontrols="hidebuttonForASinglePano2();"
    showtourcontrols="showbuttonForASinglePano2();"

    onPanoStart="showbuttonForASinglePano2();"

    keep="true" />
  <action name="hidebuttonForASinglePano2">set(layer[buttonForASinglePano2].visible, false);</action>
  <action name="showbuttonForASinglePano2">
    set(display_buttonForASinglePano2, false);
    if(tour_displaycontrols,


    if (xml.scene == pano50, set(display_buttonForASinglePano2, true); );


    );
    if (display_buttonForASinglePano2,
      set(layer[buttonForASinglePano2].visible, true);
    ,
      hidebuttonForASinglePano2();
    );
  </action>



<!-- ********** -->
<!-- NDsmall -->
<!-- id : buttonForASinglePano3 -->
<!-- ********** -->

  <layer name="buttonForASinglePano3"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano3/_32452_5_copy.png"
         align="bottom"
         x="0"
         y="80"
         zorder="10"
         visible="false"
         onclick="buttonForASinglePano3OnClick"
         height="40"
         width="100"
         />



  <action name="buttonForASinglePano3OnClick">
          mainloadscene(pano50);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));


  </action>

  <events name="buttonForASinglePano3events"
    onTourStart="showbuttonForASinglePano3();"
    hidetourcontrols="hidebuttonForASinglePano3();"
    showtourcontrols="showbuttonForASinglePano3();"

    onPanoStart="showbuttonForASinglePano3();"

    keep="true" />
  <action name="hidebuttonForASinglePano3">set(layer[buttonForASinglePano3].visible, false);</action>
  <action name="showbuttonForASinglePano3">
    set(display_buttonForASinglePano3, false);
    if(tour_displaycontrols,


    if (xml.scene == pano19941, set(display_buttonForASinglePano3, true); );


    );
    if (display_buttonForASinglePano3,
      set(layer[buttonForASinglePano3].visible, true);
    ,
      hidebuttonForASinglePano3();
    );
  </action>



  <!-- Sounds Management -->
  <plugin name="soundinterface"
          preload="true"
          url.flash="%SWFPATH%/graphics/soundinterface.swf"
          url.html5="%FIRSTXML%/graphics/soundinterface.js"
          rootpath="%$videos_sounds_path%/sounds"
          backgroundsound=""
          backgroundsoundloops="0"
          bgsound="false"
          bgsoundpaused="false"
          bgsoundloopended="false"
          bgsoundtoforce = "false"
          volumeinitialized="false"
          started="true"
          keep="true"/>
  <events name="soundmanagementevents"
          onnewpano="if(plugin[soundinterface].started,playbackgroundsound(););"
          onxmlcomplete="soundinterfaceonxmlcomplete();"
          keep="true"/>
  <action name="soundinterfaceonxmlcomplete">
    ifnot(plugin[soundinterface].volumeinitialized,
      div(plugin[soundinterface].volume, tour_soundsvolume, 100);
      set(plugin[soundinterface].volumeinitialized,true);
    );
  </action>
  <action name="playsound3Dwhenpossible">
    set(really_play_sound, true);
    if (tour_current_played_sound,
      if (%1 == tour_current_played_sound,
        delete(tour_current_played_sound);
        set(tour_current_played_sound_state, 0);
        delete(tour_current_played_sound_paused);
        stopsound(%1);
        set(really_play_sound, false);
        if(%4,
          delete(tour_current_played_sound_pausesound);
          resumeTourSoundsActions(true,true,true,true,true);
        );
      );
    );
    if (really_play_sound,
      if (tour_current_played_sound,
        stopsound(get(tour_current_played_sound));

        ifnot(%4,
          if(tour_current_played_sound_pausesound,
            delete(tour_current_played_sound_pausesound);
            resumeTourSoundsActions(true,true,true,true,true);
          );
        );
      );
      if(%4,
        set(tour_current_played_sound_pausesound, true);
        pauseTourSoundsActions(true,false,true,true,true);
      );
      set(tour_current_played_sound, %1);
      if(tour_current_played_video,
        set(tour_current_played_sound_state, 2);
      ,
        set(tour_current_played_sound_state, 1);
      );
      set(tour_current_played_sound_paused, false);
      if (%3,
        if (device.flash,
          div(volume, tour_soundsvolume, 100);
          if(%9 != null,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8);
          );
        ,
          if(%9 != null,
            playsound(%1,%2,%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound(%1,%2,%8);
          );
        );
      ,
        if(%6 != null,
          playsound(%1,%2,%5,stopsound3Dwhenpossible(%1,%4));
        ,
          playsound(%1,%2,%5);
        );
      );

      ifnot(tour_soundson,
        set(tour_current_played_sound_paused, true);
        pausesound(%1);
      );
    );
  </action>
  <action name="stopsound3Dwhenpossible">
    if (%1 == tour_current_played_sound,
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
      delete(tour_current_played_sound_paused);

      ifnot(device.safari,
        stopsound(%1);
      );
      if(%2,
        delete(tour_current_played_sound_pausesound);
        resumeTourSoundsActions(true,true,true,true,true);
      );
    );
  </action>
  <action name="playbackgroundsound">
  if(playsound,
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound,
        if (plugin[soundinterface].backgroundsound != scene[get(xml.scene)].backgroundsound,
          copy(plugin[soundinterface].backgroundsound, scene[get(xml.scene)].backgroundsound);
          copy(plugin[soundinterface].backgroundsoundloops, scene[get(xml.scene)].backgroundsoundloops);
          if (tour_soundson,
            set(plugin[soundinterface].bgsound, true);
            set(plugin[soundinterface].bgsoundpaused, false);
            set(plugin[soundinterface].bgsoundloopended, false);
            set(plugin[soundinterface].bgsoundtoforce, false);
            if(scene[get(xml.scene)].video == false OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              if(plugin[soundinterface].backgroundsoundloops GT 0,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
              ,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
              );
            );
           ,
            set(plugin[soundinterface].bgsoundtoforce, true);
            set(plugin[soundinterface].bgsound, false);
          );
        ,
          if (tour_soundson,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            );
          ,
            set(plugin[soundinterface].bgsoundtoforce, true);
            set(plugin[soundinterface].bgsound, false);
          );
        );
      );
    );
  ,
    delayedcall(0.2, playbackgroundsound());
  );
  </action>
  <action name="stopbackgroundsoundoncomplete">
    if (plugin[soundinterface].backgroundsound,
    if (plugin[soundinterface].backgroundsoundloops GT 0,

      set(plugin[soundinterface].backgroundsoundloops, 0);
      set(plugin[soundinterface].bgsound, false);
      set(plugin[soundinterface].bgsoundpaused, false);
      set(plugin[soundinterface].bgsoundloopended, true);
    );
    );
  </action>
  <action name="resetbackgroundsoundifneeded">
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound != scene[%1].backgroundsound,
        if(plugin[soundinterface].backgroundsound,
          stopsound(bgsoundname);
        );
        set(plugin[soundinterface].backgroundsound, "");
        set(plugin[soundinterface].backgroundsoundloops, 0);
        set(plugin[soundinterface].bgsound, false);
        set(plugin[soundinterface].bgsoundpaused, false);
        set(plugin[soundinterface].bgsoundloopended, false);
      );
    );
  </action>
  <action name="pausebackgroundsound">
    if(plugin[soundinterface].backgroundsound,
      if (plugin[soundinterface].bgsound,
        if(plugin[soundinterface].bgsoundpaused == false AND plugin[soundinterface].bgsoundloopended == false,
          pausesound(bgsoundname);
          set(plugin[soundinterface].bgsoundpaused, true);
        );
      );
    );
    pauseVideoSceneSound();
  </action>
  <action name="resumebackgroundsound">
    set(bgSoundOnResume, true);
    set(forceBgSoundOnResume, true);
    if(layer[displayedStandardVideo],
    if(layer[displayedStandardVideo].pausebgsound AND tour_current_played_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(layer[webvideodisplay_player],
    if(layer[webvideodisplay_player].pausebgsound AND tour_current_played_web_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(tour_current_played_sound_pausesound AND tour_current_played_sound,
      set(bgSoundOnResume, false);
    );
    ifnot(plugin[soundinterface].backgroundsound AND scene[get(xml.scene)].backgroundsound,
      set(bgSoundOnResume, false);
    );
    if(videospots_playing GT 0,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    );
    if(bgSoundOnResume,
      if (plugin[soundinterface].backgroundsound,
        if (tour_soundson,
          if (plugin[soundinterface].bgsound AND plugin[soundinterface].bgsoundloopended == false,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            ,

              if(device.mobile OR device.tablet OR device.safari OR device.chrome,
                resumesound(bgsoundname);
                set(plugin[soundinterface].bgsoundpaused, false);
              );
            );
          ,
            if(((plugin[soundinterface].bgsoundpaused == true OR plugin[soundinterface].bgsoundtoforce == true) AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              set(plugin[soundinterface].bgsound, true);
              set(plugin[soundinterface].bgsoundpaused, false);
              set(plugin[soundinterface].bgsoundloopended, false);
              set(plugin[soundinterface].bgsoundtoforce, false);
              if(plugin[soundinterface].backgroundsoundloops GT 0,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
              ,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
              );
            );
          );
        );
      );
      resumeVideoSceneSound();
    ,
      if(forceBgSoundOnResume,
        playbackgroundsound();
        resumeVideoSceneSound();
      );
    );
  </action>
  <action name="resumeVideoSceneSound">
    if(scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == false,
      videointerface_start_sound();
    );
  </action>
  <action name="pauseVideoSceneSound">
    if(scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == false,
      videointerface_stop_sound();
    );
  </action>
  <action name="preloadSounds">
    preloadsound("_24030222532651932654.mp3");
  </action>

  <action name="play3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, playpanolocalsounds();););
  </action>
  <action name="stop3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, stoppanolocalsounds();););
  </action>
  <action name="resume3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds,
      set(kill3dSoundOnResume, true);
      if(layer[displayedStandardVideo],
      if(layer[displayedStandardVideo].pausebgsound,
      if(tour_current_played_video,
        set(kill3dSoundOnResume, false);
      );););
      if(layer[webvideodisplay_player],
      if(layer[webvideodisplay_player].pausebgsound,
      if(tour_current_played_web_video,
        set(kill3dSoundOnResume, false);
      );););
      if(tour_current_played_sound_pausesound,
      if(tour_current_played_sound,
        set(kill3dSoundOnResume, false);
      ););
      if(kill3dSoundOnResume,
        resumepanolocalsounds();
      );
    ););
  </action>
  <action name="pause3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, pausepanolocalsounds();););
  </action>
  <action name="set3DLocalSoundsVolume">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, setpanolocalsoundsvolume();););
  </action>
  <action name="playTourSounds">
    set(tour_soundson, true);events.dispatch(playtoursoundsevent);
    resumeTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="stopTourSounds">
    set(tour_soundson, false);events.dispatch(stoptoursoundsevent);
    pauseTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="setTourSoundsVolume">
    set(tour_soundsvolume, %1);events.dispatch(changetoursoundsevent);
    div(volume, tour_soundsvolume, 100);
    set(plugin[soundinterface].volume, get(volume));
    set3DLocalSoundsVolume();
  </action>
  <action name="playTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        play3DLocalSounds();
        );
      );
    );
    if(%2,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
          resumebackgroundsound();
        );
      );
    );
  </action>
  <action name="stopTourSoundsActions">
    if(%1,
      stop3DLocalSounds();
    );
    if(%2,
      stopSoundActionsSounds();
    );
    if(%3,
      stopVideoActionsSounds();
    );
    if(%4,
      pausebackgroundsound();
    );
  </action>
  <action name="resumeTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        resume3DLocalSounds();
        );
      );
    );
    if(%2,
      resumeSoundActionsSounds();
    );
    if(%3,
      resumeVideoActionsSounds();
    );
    if(%4,
      if(%5,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      ,
        pausebackgroundsound();
      );
    );
  </action>
  <action name="pauseTourSoundsActions">
    if(%1,
      pause3DLocalSounds();
    );
    if(%2,
      pauseSoundActionsSounds();
    );
    if(%3,
      pauseVideoActionsSounds();
    );
    if(%4,
      if(%5,
        pausebackgroundsound();
      ,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      );
    );
  </action>
  <action name="stopSoundActionsSounds">
    if (tour_current_played_sound,
      delete(tour_current_played_sound_paused);
      stopsound(get(tour_current_played_sound));
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
    );
  </action>
  <action name="stopVideoActionsSounds">
    if(tour_current_played_video,
      if(layer[displayedStandardVideo],
        layer[displayedStandardVideo].stop();
        removelayer(displayedStandardVideo);
        if(layer[displayedStandardVideoOverlayButton], removelayer(displayedStandardVideoOverlayButton); );
        if(layer[displayedStandardVideoOverlay], removelayer(displayedStandardVideoOverlay); );
        delete(tour_current_played_video);
        set(tour_current_played_video_state, 0);
      );
    );
    if(tour_current_played_web_video,
      displayWebVideoObjectClose();
    );
  </action>
  <action name="resumeSoundActionsSounds">
    if (tour_current_played_sound,
      set(resumeSoundActionsVerification, true);
      if(tour_current_played_video,
        if(tour_current_played_sound_state LT tour_current_played_video_state,
          set(resumeSoundActionsVerification, false);
        );
      );
      if(resumeSoundActionsVerification,
        if (tour_soundson,
          if(tour_current_played_sound_paused,
            set(tour_current_played_sound_paused, false);
            resumesound(get(tour_current_played_sound));
          ,

            if(device.mobile OR device.tablet OR device.safari OR device.chrome,
              set(tour_current_played_sound_paused, false);
              resumesound(get(tour_current_played_sound));
            );
          );
        );
      );
    );
  </action>
  <action name="resumeVideoActionsSounds">
    if(tour_current_played_video,
      set(resumeVideoActionsVerification, true);
      if(tour_current_played_sound,
        if(tour_current_played_video_state LT tour_current_played_sound_state,
          set(resumeVideoActionsVerification, false);
        );
      );
      if(resumeVideoActionsVerification,
        if (tour_soundson,
          if(device.flash OR (device.webgl AND !device.ios),
            div(volume, tour_soundsvolume, 100);
            set(layer[displayedStandardVideo].volume, get(volume));
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.startVideosSounds(get(volume)));
            ,
              if(tour_soundsvolume GT 0,
                set(layer[displayedStandardVideo].muted, false);
              ,
                set(layer[displayedStandardVideo].muted, true);
              );
            );
          );
        ,
          if(device.flash OR (device.webgl AND !device.ios),
            set(layer[displayedStandardVideo].volume, 0);
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.stopVideosSounds());
            ,
              set(layer[displayedStandardVideo].muted, true);
            );
          );
        );
      );
    );
  </action>
  <action name="pauseSoundActionsSounds">
    if (tour_current_played_sound,
      ifnot(tour_current_played_sound_paused,
        set(tour_current_played_sound_paused, true);
        pausesound(get(tour_current_played_sound));
      );
    );
  </action>
  <action name="pauseVideoActionsSounds">
    if(tour_current_played_video,
      if(device.flash OR (device.webgl AND !device.ios),
        set(layer[displayedStandardVideo].volume, 0);
      ,
        ifnot(device.ios,
          js(kpanotour.Sounds.stopVideosSounds());
        ,
          set(layer[displayedStandardVideo].muted, true);
        );
      );
    );
  </action>

	<!-- WebVR plugin for VR availability tests -->

	<plugin name="ptpvrmode" devices="html5" keep="true"
		url="%FIRSTXML%/graphics/webvr.js"
		mobilevr_support="true"
		mobilevr_fake_support="true"
		vr_cursor=""
		vr_cursor_enabled="false"
		onavailable="delayedcall(1, checkVrAvailability(););"
		onunavailable="checkVrUnavailable();"
		/>
	<action name="checkVrAvailability">
		if(plugin[ptpvrmode],
			if (plugin[ptpvrmode].isavailable,
				set(tour_vrdevices, true);
				events.dispatch(onvravailable);
			,
				set(tour_vrdevices, false);
			);
		,
			checkVrUnavailable();
		);
	</action>
	<action name="checkVrUnavailable">
		set(tour_vrdevices, false);
		events.dispatch(onvrunavailable);
	</action>
  <action name="enableGyroscope">
    changeGyroscopeState(true);
  </action>
  <action name="disableGyroscope">
    changeGyroscopeState(false);
  </action>


  <action name="displayImage">
    if (layer[displayedStandardImage],
      if(layer[displayedStandardImage].doNotDeleteMe,
        set(layer[displayedStandardImage].currentCall, false);
        set(layer[displayedStandardImage].doNotDeleteMe, false);

        if (%1 == layer[displayedStandardImage].url,
          applyDisplayedImageObjectAnimation(%8);
        ,
          setDisplayedImageObjectParameters(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10);
        );
      ,
        set(layer[displayedStandardImage].currentCall, false);
        set(layer[displayedStandardImage].doNotDeleteMe, true);
        events.dispatch(onremovedisplayedobject);
        delayedcall(0.2,displayImage(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12););
      );
    ,
      if(%10,
        addlayer(displayedStandardImageOverlay);
        set(layer[displayedStandardImageOverlay].keep, false);
        set(layer[displayedStandardImageOverlay].width, 100%);
        set(layer[displayedStandardImageOverlay].height, 100%);
        set(layer[displayedStandardImageOverlay].type, container);
        set(layer[displayedStandardImageOverlay].zorder, 98);
        set(layer[displayedStandardImageOverlay].visible, false);
        set(layer[displayedStandardImageOverlay].onclick, applyDisplayedImageObjectAnimation(%8););
        set(layer[displayedStandardImageOverlay].bgcolor, "0x%11");
        set(layer[displayedStandardImageOverlay].bgalpha, %12);
        set(layer[displayedStandardImageOverlay].bgcapture, true);
      );
      addlayer(displayedStandardImage);
      set(layer[displayedStandardImage].keep, false);
      set(layer[displayedStandardImage].onclick, applyDisplayedImageObjectAnimation(%8););
      set(layer[displayedStandardImage].zorder , 99);
      set(layer[displayedStandardImage].currentCall, true);
      set(layer[displayedStandardImage].doNotDeleteMe, true);
      set(layer[displayedStandardImage].onloaded, resizeDisplayedImageObject());
      events.dispatch(onremovedisplayedobject);
      delayedcall(0.2,displayImage(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12););
      set(layer[displayedStandardImage].visible, false);
    );
  </action>
  <action name="applyDisplayedImageObjectAnimation">resumeautorotation(forcehotspot);

    if (%1,
      stoptween(layer[displayedStandardImage].width, layer[displayedStandardImage].height);
      tween(layer[displayedStandardImage].width|layer[displayedStandardImage].height, 1|1, 1, easeOutQuad, WAIT);
      if(layer[displayedStandardImage].overlay,removelayer(displayedStandardImageOverlay););removelayer(displayedStandardImage);
    ,
      if(layer[displayedStandardImage].overlay,removelayer(displayedStandardImageOverlay););removelayer(displayedStandardImage);
    );
  </action>
  <action name="setDisplayedImageObjectParameters">
    set(layer[displayedStandardImage].url       , %1);
    set(layer[displayedStandardImage].align     , %2);
    set(layer[displayedStandardImage].x         , %3);
    set(layer[displayedStandardImage].y         , %4);
    set(layer[displayedStandardImage].imgwidth  , %5);
    set(layer[displayedStandardImage].imgheight , %6);
    set(layer[displayedStandardImage].animated  , %8);
    set(layer[displayedStandardImage].applyratio, %9);
    set(layer[displayedStandardImage].overlay   , %10);
    if (%7,pauseautorotation(forcehotspot);
);
  </action>
  <action name="resizeDisplayedImageObject">
    if(layer[displayedStandardImage].url,
    set(layer[displayedStandardImage].fullwidth, get(layer[displayedStandardImage].width));
    set(layer[displayedStandardImage].fullheight, get(layer[displayedStandardImage].height));
    if(layer[displayedStandardImage].animated,
      set(layer[displayedStandardImage].width , 1);
      set(layer[displayedStandardImage].height, 1);
    );
    if(layer[displayedStandardImage].imgwidth != "" AND layer[displayedStandardImage].imgheight != "",
      if(layer[displayedStandardImage].imgwidth == "prop",
        set(tempDisplayedImageObjectHeight, get(layer[displayedStandardImage].imgheight));
        indexoftxt(tempDisplayedImageObjectHeightPercent, get(tempDisplayedImageObjectHeight), "%");
        if(tempDisplayedImageObjectHeightPercent GT 0,
          txtreplace(tempDisplayedImageObjectHeight, '%', '');
          mul(tempDisplayedImageObjectHeight, get(stageheight));
          div(tempDisplayedImageObjectHeight, 100);
          Math.round(tempDisplayedImageObjectHeight);
        );
        mul(flyingImgWidth,get(layer[displayedStandardImage].fullwidth),get(tempDisplayedImageObjectHeight));
        div(flyingImgWidth,get(layer[displayedStandardImage].fullheight));
        Math.round(flyingImgWidth);
        set(layer[displayedStandardImage].imgwidth , get(flyingImgWidth));
        set(layer[displayedStandardImage].imgheight, get(tempDisplayedImageObjectHeight));
      ,
        if(layer[displayedStandardImage].imgheight == "prop",
          set(tempDisplayedImageObjectWidth, get(layer[displayedStandardImage].imgwidth));
          indexoftxt(tempDisplayedImageObjectWidthPercent, get(tempDisplayedImageObjectWidth), "%");
          if(tempDisplayedImageObjectWidthPercent GT 0,
            txtreplace(tempDisplayedImageObjectWidth, '%', '');
            mul(tempDisplayedImageObjectWidth, get(stagewidth));
            div(tempDisplayedImageObjectWidth, 100);
            Math.round(tempDisplayedImageObjectWidth);
          );
          mul(flyingImgHeight,get(layer[displayedStandardImage].fullheight),get(tempDisplayedImageObjectWidth));
          div(flyingImgHeight,get(layer[displayedStandardImage].fullwidth));
          Math.round(flyingImgHeight);
          set(layer[displayedStandardImage].imgwidth , get(tempDisplayedImageObjectWidth));
          set(layer[displayedStandardImage].imgheight , get(flyingImgHeight));
        ,
          set(tempDisplayedImageObjectWidth, get(layer[displayedStandardImage].imgwidth));
          set(tempDisplayedImageObjectHeight, get(layer[displayedStandardImage].imgheight));
          indexoftxt(tempDisplayedImageObjectWidthPercent, get(tempDisplayedImageObjectWidth), "%");
          indexoftxt(tempDisplayedImageObjectHeightPercent, get(tempDisplayedImageObjectHeight), "%");
          if(tempDisplayedImageObjectWidthPercent GT 0,
            txtreplace(tempDisplayedImageObjectWidth, '%', '');
            mul(tempDisplayedImageObjectWidth, get(stagewidth));
            div(tempDisplayedImageObjectWidth, 100);
            Math.round(tempDisplayedImageObjectWidth);
          );
          if(tempDisplayedImageObjectHeightPercent GT 0,
            txtreplace(tempDisplayedImageObjectHeight, '%', '');
            mul(tempDisplayedImageObjectHeight, get(stageheight));
            div(tempDisplayedImageObjectHeight, 100);
            Math.round(tempDisplayedImageObjectHeight);
          );
          set(layer[displayedStandardImage].imgwidth , get(tempDisplayedImageObjectWidth));
          set(layer[displayedStandardImage].imgheight, get(tempDisplayedImageObjectHeight));
        );
      );
    ,
      set(layer[displayedStandardImage].imgwidth , get(layer[displayedStandardImage].fullwidth));
      set(layer[displayedStandardImage].imgheight, get(layer[displayedStandardImage].fullheight));
    );

    set(resizedwidth, get(layer[displayedStandardImage].imgwidth));
    set(resizedheight, get(layer[displayedStandardImage].imgheight));
    if(layer[displayedStandardImage].applyratio,
      sub(resizedstagewidth, get(stagewidth), get(layer[displayedStandardImage].x));
      sub(resizedstageheight, get(stageheight), get(layer[displayedStandardImage].y));
      Math.abs(resizedstagewidth);
      Math.abs(resizedstageheight);
      if(resizedwidth GT resizedstagewidth,
        mul(tempresizedheight, get(resizedheight), get(resizedstagewidth));
        div(tempresizedheight, get(resizedwidth));
        Math.round(tempresizedheight);
        set(resizedwidth, get(resizedstagewidth));
        set(resizedheight, get(tempresizedheight));
      );
      if(resizedheight GT resizedstageheight,
        mul(tempresizedwidth, get(resizedwidth), get(resizedstageheight));
        div(tempresizedwidth, get(resizedheight));
        Math.round(tempresizedwidth);
        set(resizedheight, get(resizedstageheight));
        set(resizedwidth, get(tempresizedwidth));
      );
    );

    if(layer[displayedStandardImage].animated,
      set(layer[displayedStandardImage].animated, false);
      tween(layer[displayedStandardImage].width , get(resizedwidth), 1, easeOutQuad);
      tween(layer[displayedStandardImage].height, get(resizedheight), 1, easeOutQuad);
    ,
      set(layer[displayedStandardImage].width , get(resizedwidth));
      set(layer[displayedStandardImage].height, get(resizedheight));
    );
    if(layer[displayedStandardImage].overlay,set(layer[displayedStandardImageOverlay].visible, true););
    set(layer[displayedStandardImage].visible, true);
    ,
      delayedcall(0.2,resizeDisplayedImageObject(););
    );
  </action>
  <events name="displayedImageObjectEvents" keep="true" onremovedisplayedobject="displayedImageObjectOnRemoveDisplayedObject" onresize="if(layer[displayedStandardImage],resizeDisplayedImageObject());" />
  <action name="displayedImageObjectOnRemoveDisplayedObject">
    ifnot(layer[displayedStandardImage].currentCall,if(layer[displayedStandardImage].visible,resumeautorotation(forcehotspot);

      if(layer[displayedStandardImage].overlay,removelayer(displayedStandardImageOverlay););
      removelayer(displayedStandardImage);
    ););
  </action>


</krpano>
